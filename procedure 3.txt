 QUE 

StationMaster:

StationCode
StationName -

1
Surat
2
Mumbai
3
Valsad
4
Vapi
5
Vadodra
6
New Delhi
7
Jaipur


TrainMaster :

TrainNumber
TrainName
StartStationCode
EndStationCode
TrainCategoryID - 

10001
SuratLocal
1
5
1
10002
SuratPassanger
1
6
1
10003
Shatabdi
2
5
2
10004
Rajdhani
2
6
2
10005
FlyingRani
7
1
3


TrainCategory:

TrainCategoryID
CategoryName -

1
Local
2
SuperFast
3
Express

que:

a. Create a procedure that will take Station Name and Train Category
parameters as an input and display all related information.
b. Create a procedure that will display trains running between two
stations. For example, all trains running between Surat and Mumbai.
NOTE: Also write Exception Handlers for above mentioned procedures.
For example,
Station Name not found
Train Category not found

c. Create a procedure to INSERT new Train information.
d. Create a procedure to UPDATE Train information.
e. Create a procedure to DELETE Train information.

 -+-   ANS

-- table creation of STATIONMASTER, TRAINMASTER and TRAINCATEGORY

CREATE TABLE STATIONMASTER(
STATIONCODE NUMBER PRIMARY KEY,
STATIONNAME VARCHAR(100)
);

-- op
{
Table created.
}


BEGIN
INSERT INTO STATIONMASTER VALUES(1,'Surat');
INSERT INTO STATIONMASTER VALUES(2,'Mumbai');
INSERT INTO STATIONMASTER VALUES(3,'Valsad');
INSERT INTO STATIONMASTER VALUES(4,'Vapi');
INSERT INTO STATIONMASTER VALUES(5,'Vadodra');
INSERT INTO STATIONMASTER VALUES(6,'New Delhi');
INSERT INTO STATIONMASTER VALUES(7,'Jaipur');
END;
/

-- op
{
PL/SQL procedure successfully completed.
}


CREATE TABLE TRAINCATEGORY(
TRAINCATEGORYID NUMBER PRIMARY KEY, 
CATEGORYNAME VARCHAR(50)
);

-- op
{
Table created.
}


BEGIN
INSERT INTO TRAINCATEGORY VALUES(1,'Local');
INSERT INTO TRAINCATEGORY VALUES(2,'SuperFast');
INSERT INTO TRAINCATEGORY VALUES(3,'Express');
END;
/

-- op
{
PL/SQL procedure successfully completed.
}


CREATE TABLE TRAINMASTER(
TRAINNUMBER NUMBER PRIMARY KEY,
TRAINNAME VARCHAR(100),
STARTSTATIONCODE NUMBER,
ENDSTATIONCODE NUMBER,
TRAINCATEGORYID NUMBER
);

-- op
{
Table created.
}


BEGIN
INSERT INTO TRAINMASTER VALUES(10001,'SuratLocal',1,5,1);
INSERT INTO TRAINMASTER VALUES(10002,'SuratPassanger',1,6,1);
INSERT INTO TRAINMASTER VALUES(10003,'Shatabdi',2,5,2);
INSERT INTO TRAINMASTER VALUES(10004,'Rajdhani',2,6,2);
INSERT INTO TRAINMASTER VALUES(10005,'FlyingRani',7,1,3);
END;
/

-- op
{
PL/SQL procedure successfully completed.
}




=====


-- queries


a. Create a procedure that will take Station Name and Train Category parameters as an input and display all related information.

--

CREATE OR REPLACE PROCEDURE GET_INFO_BY_S_AND_CAT(
SNAME STATIONMASTER.STATIONNAME%TYPE,
CNAME TRAINCATEGORY.CATEGORYNAME%TYPE
)
AS
NUM NUMBER:= 0;
T_NOT_AV EXCEPTION;
SCODE STATIONMASTER.STATIONCODE%TYPE;
CCODE TRAINCATEGORY.TRAINCATEGORYID%TYPE;
TRAIN_INFO TRAINMASTER%ROWTYPE;
CURSOR T_INFO IS SELECT * FROM TRAINMASTER;
BEGIN
SELECT STATIONCODE INTO SCODE FROM STATIONMASTER WHERE STATIONNAME = SNAME;
SELECT TRAINCATEGORYID INTO CCODE FROM TRAINCATEGORY WHERE CATEGORYNAME = CNAME;
OPEN T_INFO;
LOOP
FETCH T_INFO INTO TRAIN_INFO;
EXIT WHEN T_INFO%NOTFOUND;
IF(TRAIN_INFO.TRAINCATEGORYID = CCODE  AND (TRAIN_INFO.STARTSTATIONCODE = SCODE OR  TRAIN_INFO.ENDSTATIONCODE= SCODE)) THEN
NUM := NUM + 1;
DBMS_OUTPUT.PUT_LINE('TRAIN NUMBER : ' || TRAIN_INFO.TRAINNUMBER);
DBMS_OUTPUT.PUT_LINE('TRAIN NAME : ' || TRAIN_INFO.TRAINNAME);
DBMS_OUTPUT.PUT_LINE('START STATION CODE : ' || TRAIN_INFO.STARTSTATIONCODE);
DBMS_OUTPUT.PUT_LINE('END STATION CODE  : ' || TRAIN_INFO.ENDSTATIONCODE);
DBMS_OUTPUT.PUT_LINE('TRAIN CATEGORY ID : ' || TRAIN_INFO.TRAINCATEGORYID);
DBMS_OUTPUT.PUT_LINE(' ');
END IF;
END LOOP;

IF (NUM = 0) THEN
RAISE T_NOT_AV;
END IF;

EXCEPTION
WHEN T_NOT_AV THEN
DBMS_OUTPUT.PUT_LINE(' ');
DBMS_OUTPUT.PUT_LINE('TRAIN NOT AVAILABLE');
WHEN NO_DATA_FOUND THEN
IF SCODE IS NULL THEN
DBMS_OUTPUT.PUT_LINE(' ');
DBMS_OUTPUT.PUT_LINE('STATION  NOT FOUND');
END IF;
IF CCODE IS NULL THEN
DBMS_OUTPUT.PUT_LINE(' ');
DBMS_OUTPUT.PUT_LINE('TRAIN CATEGORY NOT FOUND');
END IF;
END;
/

-- op
{
Procedure created.
}


BEGIN
GET_INFO_BY_S_AND_CAT('Surat','Express');
END;
/

BEGIN
GET_INFO_BY_S_AND_CAT('Surat','Local');
END;
/


---------------------
b. Create a procedure that will display trains running between two stations. For example, all trains running between Surat and Mumbai.

--

CREATE OR REPLACE PROCEDURE GET_TRAIN_INFO_BY_STATION(
ssname STATIONMASTER.STATIONNAME%TYPE,
esname STATIONMASTER.STATIONNAME%TYPE
)
AS
num NUMBER:= 0;
no_train_available EXCEPTION;
TRAINS TRAINMASTER%ROWTYPE;
SSCODE STATIONMASTER.STATIONCODE%TYPE;
ESCODE STATIONMASTER.STATIONCODE%TYPE;
CURSOR t1 IS SELECT * FROM TRAINMASTER;
BEGIN
SELECT STATIONCODE INTO SSCODE FROM STATIONMASTER WHERE STATIONNAME = ssname;
SELECT STATIONCODE INTO ESCODE FROM STATIONMASTER WHERE STATIONNAME = esname;
DBMS_OUTPUT.PUT_LINE('TRAINS AVAILABLE BETWEEN ' || ssname || ' AND ' || esname || ' ARE : ');
OPEN t1;
LOOP
FETCH t1 INTO TRAINS;
EXIT WHEN t1%NOTFOUND;
IF(TRAINS.STARTSTATIONCODE = SSCODE AND TRAINS.ENDSTATIONCODE = ESCODE) THEN
num := num + 1;
DBMS_OUTPUT.PUT_LINE('TRAIN NUMBER : ' || TRAINS.TRAINNUMBER);
DBMS_OUTPUT.PUT_LINE('TRAIN NAME : ' || TRAINS.TRAINNAME);
DBMS_OUTPUT.PUT_LINE('START STATION CODE : ' || TRAINS.STARTSTATIONCODE);
DBMS_OUTPUT.PUT_LINE('END STATION CODE  : ' || TRAINS.ENDSTATIONCODE);
DBMS_OUTPUT.PUT_LINE('TRAIN CATEGORY ID : ' || TRAINS.TRAINCATEGORYID);
DBMS_OUTPUT.PUT_LINE(' ');
END IF;
END LOOP;

IF(num = 0) THEN
RAISE no_train_available;
END IF;


EXCEPTION
WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE(' ');
DBMS_OUTPUT.PUT_LINE('STATION NOT FOUND');
WHEN no_train_available THEN
DBMS_OUTPUT.PUT_LINE(' ');
DBMS_OUTPUT.PUT_LINE('TRAIN NOT FOUND');
END;
/

-- op
{
Procedure created.
}

BEGIN
GET_TRAIN_INFO_BY_STATION('Surat','Mumbai');
END;
/

-- NOTE: Also write Exception Handlers for above mentioned procedures.
-- For example,
-- Station Name not found
-- Train Category not found

---------------------
c. Create a procedure to INSERT new Train information.

--

CREATE OR REPLACE PROCEDURE INSERT_NEW_TRAIN(
T_NUMBER TRAINMASTER.TRAINNUMBER%TYPE,
T_NAME TRAINMASTER.TRAINNAME%TYPE,
T_SSNAME STATIONMASTER.STATIONNAME%TYPE,
T_ESNAME STATIONMASTER.STATIONNAME%TYPE,
T_CNAME TRAINCATEGORY.CATEGORYNAME%TYPE
)
AS
SSCODE STATIONMASTER.STATIONCODE%TYPE;
ESCODE STATIONMASTER.STATIONCODE%TYPE;
CCODE TRAINCATEGORY.TRAINCATEGORYID%TYPE;
BEGIN
SELECT STATIONCODE INTO SSCODE FROM STATIONMASTER WHERE STATIONNAME = T_SSNAME;
SELECT STATIONCODE INTO ESCODE FROM STATIONMASTER WHERE STATIONNAME = T_ESNAME;
SELECT TRAINCATEGORYID INTO CCODE  FROM TRAINCATEGORY WHERE CATEGORYNAME = T_CNAME;
INSERT INTO TRAINMASTER VALUES(T_NUMBER,T_NAME,SSCODE,ESCODE,CCODE);
DBMS_OUTPUT.PUT_LINE(' ');
DBMS_OUTPUT.PUT_LINE('DATA INSERTED SUCCESSFULLY');
EXCEPTION
WHEN NO_DATA_FOUND THEN
IF SSCODE IS NULL THEN
DBMS_OUTPUT.PUT_LINE(' ');
DBMS_OUTPUT.PUT_LINE('START TATION IS NOT FOUND IN STATION TABLE');
END IF;
IF ESCODE IS NULL THEN
DBMS_OUTPUT.PUT_LINE(' ');
DBMS_OUTPUT.PUT_LINE('END TATION IS NOT FOUND IN STATION TABLE');
END IF;
IF CCODE IS NULL THEN
DBMS_OUTPUT.PUT_LINE(' ');
DBMS_OUTPUT.PUT_LINE('TRAIN CATEGORY IS NOT FOUND IN STATION TABLE');
END IF;
WHEN DUP_VAL_ON_INDEX THEN
DBMS_OUTPUT.PUT_LINE(' ');
DBMS_OUTPUT.PUT_LINE('UNIQ CONSTRAIN VIOLATED');
END;
/

-- op
{
Procedure created.
}

BEGIN 
INSERT_NEW_TRAIN(10007,'HatakeExpress','Surat','Mumbai','Local');
END;
/

---------------------
d. Create a procedure to UPDATE Train information.

--

CREATE OR REPLACE PROCEDURE UPDATE_TRAIN_INFO(
T_NUMBER TRAINMASTER.TRAINNUMBER%TYPE,
T_NAME TRAINMASTER.TRAINNAME%TYPE,
T_SSNAME STATIONMASTER.STATIONNAME%TYPE,
T_ESNAME STATIONMASTER.STATIONNAME%TYPE,
T_CNAME TRAINCATEGORY.CATEGORYNAME%TYPE
)
AS
SSCODE STATIONMASTER.STATIONCODE%TYPE;
ESCODE STATIONMASTER.STATIONCODE%TYPE;
CCODE TRAINCATEGORY.TRAINCATEGORYID%TYPE;
BEGIN
SELECT STATIONCODE INTO SSCODE FROM STATIONMASTER WHERE STATIONNAME = T_SSNAME;
SELECT STATIONCODE INTO ESCODE FROM STATIONMASTER WHERE STATIONNAME = T_ESNAME;
SELECT TRAINCATEGORYID INTO CCODE  FROM TRAINCATEGORY WHERE CATEGORYNAME = T_CNAME;
UPDATE TRAINMASTER SET TRAINNAME = T_NAME, STARTSTATIONCODE = SSCODE, ENDSTATIONCODE = ESCODE, TRAINCATEGORYID = CCODE WHERE TRAINNUMBER = T_NUMBER;
DBMS_OUTPUT.PUT_LINE(' ');
DBMS_OUTPUT.PUT_LINE('TRAIN ALL INFORMATION UPDATED SUCCESSFULLY');


EXCEPTION
WHEN NO_DATA_FOUND THEN
IF SSCODE IS NULL THEN
DBMS_OUTPUT.PUT_LINE(' ');
DBMS_OUTPUT.PUT_LINE('START TATION IS NOT FOUND IN STATION TABLE');
END IF;
IF ESCODE IS NULL THEN
DBMS_OUTPUT.PUT_LINE(' ');
DBMS_OUTPUT.PUT_LINE('END TATION IS NOT FOUND IN STATION TABLE');
END IF;
IF CCODE IS NULL THEN
DBMS_OUTPUT.PUT_LINE(' ');
DBMS_OUTPUT.PUT_LINE('TRAIN CATEGORY IS NOT FOUND IN STATION TABLE');
END IF;
END;
/

-- op
{
Procedure created.
}


BEGIN
UPDATE_TRAIN_INFO(10006,'HatakeExpress','Surat','Valsad','Express');
END;
/


---------------------
e. Create a procedure to DELETE Train information.

--

CREATE OR REPLACE PROCEDURE DELETE_TRAIN(
T_NUMBER TRAINMASTER.TRAINNUMBER%TYPE
)
AS
REOCRD_TO_DELETE TRAINMASTER%ROWTYPE;
BEGIN
SELECT * INTO REOCRD_TO_DELETE FROM TRAINMASTER WHERE TRAINNUMBER = T_NUMBER;
DELETE FROM TRAINMASTER WHERE TRAINNUMBER = T_NUMBER;
DBMS_OUTPUT.PUT_LINE(' ');
DBMS_OUTPUT.PUT_LINE('TRAIN RECORD DELETED SUCCESSFULLY');
EXCEPTION
WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE(' ');
DBMS_OUTPUT.PUT_LINE('TRAIN INFO NOT FOUND WITH GIVEN TRAIN NUMBER');
END;
/

BEGIN
DELETE_TRAIN(10007);
END;
/